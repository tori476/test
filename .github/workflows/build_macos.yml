name: Build

on:
  # develop/mainへのPRマージをトリガーとしてワークフローを開始する
  pull_request:
    branches:
      - develop
      - main
    types: [closed]

  # 手動実行デバッグ用
  workflow_dispatch: {}

jobs:
  build:
    name: Build my project
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set CompressionFormat to Disabled
      # Note: '2' corresponds to Disabled in ProjectSettings.asset
      - name: Set CompressionFormat to Disabled
        run: |
          # WebGLビルドでの圧縮形式を'Disabled' (2)に設定し、ファイルサイズを安定させる
          sed -i -e 's/webGLCompressionFormat: ./webGLCompressionFormat: 2/' ProjectSettings/ProjectSettings.asset

      # Cache
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**','ProjectSettings/**') }}
          restore-keys: Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL:   ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # 📌 ここは変更せず、使用しているバージョンを維持
          unityVersion: 6000.2.2f1 
          targetPlatform: WebGL
          allowDirtyBuild: true
          # GameCIのDockerイメージのタグは、このバージョンとプラットフォームから自動生成されます。

      # Remove
      - name: Remove symlinks and macOS hidden files
        run: |
          find build -type l -delete || true
          find build -name ".DS_Store" -delete || true

      # Check build size
      - name: Check build size
        run: du -sh build
        
      # Upload
      - name: Upload
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: build/WebGL/WebGL

      # Show directory
      - name: Show build folder structure
        run: |
          echo "Contents of build directory:"
          ls -R build
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Notify Discord - Success
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"✅ ビルド成功！最新のビルドデータがデプロイされました！ \n▶️ Play: ${{ steps.deployment.outputs.page_url }}\n📄 View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord - Failure
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"❌ ビルドエラーが発生しました！ログを確認してください。 \n📄 View logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
          ${{ secrets.DISCORD_WEBHOOK_URL }}
